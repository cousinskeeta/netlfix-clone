{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","table","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c2ad1be.chunk.js","sourcesContent":["import axios from \"axios\";\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n});\n\nexport default instance;","import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title , fetchUrl, isLargeRow}) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n    // code snippet to run based on condition\n    useEffect(() => {\n        // if [], run once when page loads only ; unless specified variable\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        }\n    };\n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then((url) => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n            })\n            .catch((error) => console.log(error));\n        }\n    };\n\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row__posters\">\n                {movies.map((movie) => (\n                    <img \n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\n                        }`} \n                        alt={movie.name} \n                    /> \n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    );\n}\nexport default Row","const API_KEY = 'KEY';\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,    \n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import React, {useState, useEffect} from 'react'; \nimport axios from './axios';\nimport requests from './requests';\nimport \"./banner.css\";\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                Math.floor(Math.random()* request.data.results.length -1)\n            ]\n            );\n            return request;\n        }\n        fetchData()\n    }, []);\n    console.table(movie)\n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0,n-1) + \"...\" : str;\n    }\n    return(\n        <header className=\"banner\"\n        style={{\n            backgroundSize: \"cover\",\n            backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\"\n            )`,\n            backgroundPosition: \"center center\",\n        }}\n        >\n            \n            <div className=\"banner__contents\">\n            <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}\n            </h1>\n            <div className=\"banner__buttons\">\n                <button className=\"banner__button\">Play</button>\n                <button className=\"banner__button\">My List</button>\n            </div>\n            <h1 className=\"banner__description\">{truncate(movie?.overview, 150)}</h1>\n            </div>\n            <div className=\"banner--fadeBottom\"></div>\n        </header>\n    )\n};\n\nexport default Banner","import React, {useState, useEffect, handleShow} from 'react'\nimport \"./Nav.css\";\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            } else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n\n    return(\n    <div className={`nav ${show && \"nav__black\"}`}>\n        <img className=\"nav__logo\"\n        src=\"https://yt3.ggpht.com/ytc/AAUvwnjKOqtP-gV25CkNKjDm9WmYM0Jo2vpqht9ugPq0=s176-c-k-c0x00ffffff-no-rj\" \n        alt=\"RudaFilms Logo\"\n        />\n\n       <img className=\"nav__avatar\"\n        src=\"https://pbs.twimg.com/media/BnOZEzdCEAAqjju?format=jpg\" \n        alt=\"RudaFilms Logo\"\n        />\n    </div>\n    );\n}\n\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner'\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row \n        title=\"NETFLIX ORIGINALS\" \n        fetchUrl={requests.fetchNetflixOriginals} \n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />    \n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />    \n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />    \n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />    \n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />    \n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />    \n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}